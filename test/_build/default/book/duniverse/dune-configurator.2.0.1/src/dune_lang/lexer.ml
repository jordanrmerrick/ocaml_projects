# 1 "book/duniverse/dune-configurator.2.0.1/src/dune_lang/lexer.mll"
 
open! Stdune

open Stdune

module Token = struct
  module Comment = struct
    type t =
      | Lines of string list
      | Legacy

    let to_dyn =
      let open Dyn.Encoder in
      function
      | Legacy -> constr "Legacy" []
      | Lines l -> constr "Lines" [ list string l ]
  end

  type t =
    | Atom of Atom.t
    | Quoted_string of string
    | Lparen
    | Rparen
    | Sexp_comment
    | Eof
    | Template of Template.t
    | Comment of Comment.t
end

type t = with_comments:bool -> Lexing.lexbuf -> Token.t

let error ?(delta = 0) lexbuf message =
  let start = Lexing.lexeme_start_p lexbuf in
  let loc : Loc.t =
    { start = { start with pos_cnum = start.pos_cnum + delta }
    ; stop = Lexing.lexeme_end_p lexbuf
    }
  in
  User_error.raise ~loc [ Pp.text message ]

let invalid_dune_or_jbuild lexbuf =
  let start = Lexing.lexeme_start_p lexbuf in
  let fname = Filename.basename start.pos_fname in
  error lexbuf (sprintf "Invalid %s file" fname)

type escape_sequence =
  | Newline
  | Other

let eval_decimal_char c = Char.code c - Char.code '0'

let eval_decimal_escape c1 c2 c3 =
  (eval_decimal_char c1 * 100)
  + (eval_decimal_char c2 * 10)
  + eval_decimal_char c3

let eval_hex_char c =
  match c with
  | '0' .. '9' -> Char.code c - Char.code '0'
  | 'a' .. 'f' -> Char.code c - Char.code 'a' + 10
  | 'A' .. 'F' -> Char.code c - Char.code 'A' + 10
  | _ -> -1

let eval_hex_escape c1 c2 = (eval_hex_char c1 * 16) + eval_hex_char c2

type block_string_line_kind =
  | With_escape_sequences
  | Raw

module Template = struct
  include Template

  let dummy_loc =
    { Loc.
      start = Lexing.dummy_pos
    ; stop = Lexing.dummy_pos
    }

  let add_text parts s =
    match parts with
    | Template.Text s' :: parts -> Template.Text (s' ^ s) :: parts
    | _ -> Template.Text s :: parts

  let token parts ~quoted ~start (lexbuf : Lexing.lexbuf) =
    lexbuf.lex_start_p <- start;
    match parts with
    | [] | [Text ""] ->
      invalid_dune_or_jbuild lexbuf
    | [Text s] ->
      Token.Atom (Atom.of_string s)
    | _ ->
      Token.Template
        { quoted
        ; loc = dummy_loc
        ; parts = List.rev parts
        }

  module Buffer : sig
    val new_token : unit -> unit
    val get : unit -> Token.t
    val add_var : part -> unit
    val add_text : string -> unit
    val add_text_c : char -> unit
  end = struct
    type state =
      | String
      | Template of Template.part list

    let text_buf = Buffer.create 256

    let new_token () = Buffer.clear text_buf

    let take_buf () =
      let contents = Buffer.contents text_buf in
      Buffer.clear text_buf;
      contents

    let state = ref String

    let add_buf_to_parts parts =
      match take_buf () with
      | "" -> parts
      | t -> add_text parts t

    let get () =
      match !state with
      | String -> Token.Quoted_string (take_buf ())
      | Template parts ->
        state := String;
        begin match add_buf_to_parts parts with
        | [] -> assert false
        | [Text s] -> Quoted_string s
        | parts ->
          Token.Template
            { quoted = true
            ; loc = dummy_loc
            ; parts = List.rev parts
            }
        end

    let add_var v =
      match !state with
      | String ->
        state := Template (v :: add_buf_to_parts []);
      | Template parts ->
        let parts = add_buf_to_parts parts in
        state := Template (v::parts)

    let add_text   = Buffer.add_string text_buf
    let add_text_c = Buffer.add_char text_buf
  end
end

# 156 "book/duniverse/dune-configurator.2.0.1/src/dune_lang/lexer.ml"
let __ocaml_lex_tables = {
  Lexing.lex_base =
   "\000\000\249\255\250\255\251\255\252\255\001\000\006\000\255\255\
    \006\000\007\000\010\000\011\000\013\000\028\000\032\000\123\000\
    \254\255\065\000\188\000\254\255\255\255\014\000\252\255\253\255\
    \254\255\255\255\015\000\241\000\251\255\252\255\037\000\254\255\
    \255\255\018\000\253\255\021\000\071\000\243\000\191\000\254\255\
    \255\255\026\000\253\255\254\255\255\255\019\000\249\000\250\255\
    \251\255\252\255\021\000\041\000\254\255\255\255\253\255\250\000\
    \246\255\247\255\067\001\012\001\253\255\254\255\255\255\025\000\
    \045\001\090\001\100\001\122\001\145\001\203\001\028\000\017\002\
    \253\255\254\255\111\002\255\255\214\002\052\003\255\255";
  Lexing.lex_backtrk =
   "\007\000\255\255\255\255\255\255\255\255\002\000\001\000\255\255\
    \255\255\001\000\255\255\255\255\000\000\003\000\002\000\000\000\
    \255\255\002\000\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\003\000\255\255\255\255\255\255\003\000\255\255\
    \255\255\003\000\255\255\002\000\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\001\000\255\255\255\255\
    \255\255\255\255\004\000\004\000\255\255\255\255\255\255\005\000\
    \255\255\255\255\007\000\005\000\255\255\255\255\255\255\008\000\
    \005\000\003\000\005\000\007\000\006\000\007\000\000\000\255\255\
    \255\255\255\255\002\000\255\255\255\255\255\255\255\255";
  Lexing.lex_default =
   "\255\255\000\000\000\000\000\000\000\000\005\000\255\255\000\000\
    \255\255\255\255\255\255\255\255\012\000\255\255\255\255\255\255\
    \000\000\255\255\255\255\000\000\000\000\022\000\000\000\000\000\
    \000\000\000\000\255\255\029\000\000\000\000\000\255\255\000\000\
    \000\000\255\255\000\000\255\255\255\255\255\255\255\255\000\000\
    \000\000\043\000\000\000\000\000\000\000\255\255\048\000\000\000\
    \000\000\000\000\255\255\255\255\000\000\000\000\000\000\057\000\
    \000\000\000\000\255\255\255\255\000\000\000\000\000\000\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\072\000\
    \000\000\000\000\255\255\000\000\255\255\255\255\000\000";
  Lexing.lex_trans =
   "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\006\000\007\000\255\255\006\000\008\000\255\255\006\000\
    \007\000\010\000\006\000\010\000\011\000\010\000\010\000\255\255\
    \025\000\025\000\255\255\026\000\032\000\044\000\037\000\049\000\
    \006\000\037\000\002\000\062\000\044\000\070\000\006\000\045\000\
    \004\000\003\000\010\000\000\000\000\000\000\000\024\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\037\000\000\000\036\000\
    \000\000\000\000\000\000\005\000\070\000\015\000\000\000\015\000\
    \015\000\014\000\015\000\015\000\000\000\012\000\015\000\015\000\
    \015\000\015\000\015\000\015\000\015\000\015\000\015\000\015\000\
    \015\000\015\000\015\000\015\000\015\000\015\000\015\000\000\000\
    \015\000\015\000\015\000\015\000\015\000\015\000\015\000\015\000\
    \015\000\015\000\015\000\015\000\015\000\015\000\015\000\015\000\
    \015\000\015\000\015\000\015\000\015\000\015\000\015\000\015\000\
    \015\000\015\000\015\000\015\000\015\000\015\000\015\000\015\000\
    \015\000\015\000\015\000\015\000\015\000\015\000\015\000\015\000\
    \015\000\015\000\015\000\015\000\015\000\015\000\015\000\015\000\
    \015\000\015\000\015\000\015\000\015\000\015\000\015\000\015\000\
    \015\000\015\000\015\000\015\000\015\000\015\000\015\000\015\000\
    \015\000\015\000\015\000\016\000\015\000\018\000\015\000\015\000\
    \034\000\015\000\015\000\038\000\054\000\015\000\015\000\015\000\
    \015\000\015\000\015\000\015\000\015\000\015\000\015\000\015\000\
    \015\000\015\000\015\000\015\000\015\000\015\000\000\000\015\000\
    \015\000\015\000\015\000\015\000\015\000\015\000\015\000\015\000\
    \015\000\015\000\015\000\015\000\015\000\015\000\015\000\015\000\
    \015\000\015\000\015\000\015\000\015\000\015\000\015\000\015\000\
    \015\000\015\000\015\000\015\000\015\000\015\000\015\000\015\000\
    \015\000\015\000\015\000\015\000\015\000\015\000\015\000\015\000\
    \015\000\015\000\015\000\015\000\015\000\015\000\015\000\015\000\
    \015\000\015\000\015\000\015\000\015\000\015\000\015\000\015\000\
    \015\000\015\000\015\000\015\000\015\000\015\000\015\000\015\000\
    \015\000\015\000\019\000\032\000\037\000\039\000\033\000\037\000\
    \001\000\255\255\000\000\049\000\062\000\000\000\050\000\063\000\
    \000\000\000\000\000\000\000\000\000\000\255\255\023\000\000\000\
    \000\000\000\000\000\000\037\000\000\000\036\000\030\000\000\000\
    \000\000\000\000\042\000\053\000\060\000\000\000\051\000\061\000\
    \000\000\060\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\059\000\059\000\059\000\059\000\059\000\059\000\
    \059\000\059\000\059\000\059\000\000\000\000\000\000\000\000\000\
    \020\000\000\000\000\000\040\000\064\000\064\000\064\000\064\000\
    \064\000\064\000\064\000\064\000\064\000\064\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\031\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\052\000\060\000\000\000\
    \000\000\000\000\000\000\000\000\060\000\065\000\065\000\065\000\
    \065\000\065\000\065\000\065\000\065\000\065\000\065\000\000\000\
    \060\000\000\000\000\000\000\000\060\000\000\000\060\000\000\000\
    \000\000\000\000\058\000\067\000\067\000\067\000\067\000\067\000\
    \067\000\067\000\067\000\067\000\067\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\067\000\067\000\067\000\067\000\
    \067\000\067\000\066\000\066\000\066\000\066\000\066\000\066\000\
    \066\000\066\000\066\000\066\000\066\000\066\000\066\000\066\000\
    \066\000\066\000\066\000\066\000\066\000\066\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\067\000\067\000\067\000\067\000\
    \067\000\067\000\068\000\068\000\068\000\068\000\068\000\068\000\
    \068\000\068\000\068\000\068\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\068\000\068\000\068\000\068\000\068\000\
    \068\000\069\000\069\000\069\000\069\000\069\000\069\000\069\000\
    \069\000\069\000\069\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\069\000\069\000\069\000\069\000\069\000\069\000\
    \000\000\000\000\000\000\068\000\068\000\068\000\068\000\068\000\
    \068\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\028\000\069\000\069\000\069\000\069\000\069\000\069\000\
    \000\000\047\000\056\000\069\000\069\000\069\000\069\000\069\000\
    \069\000\069\000\069\000\069\000\069\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\069\000\069\000\069\000\069\000\
    \069\000\069\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\069\000\069\000\069\000\069\000\
    \069\000\069\000\074\000\000\000\074\000\074\000\000\000\074\000\
    \074\000\000\000\000\000\074\000\074\000\074\000\074\000\074\000\
    \074\000\074\000\074\000\074\000\074\000\074\000\074\000\074\000\
    \074\000\074\000\074\000\000\000\000\000\074\000\074\000\074\000\
    \074\000\074\000\074\000\074\000\074\000\074\000\074\000\074\000\
    \074\000\074\000\074\000\074\000\074\000\074\000\074\000\074\000\
    \074\000\074\000\074\000\074\000\074\000\074\000\074\000\074\000\
    \074\000\074\000\074\000\074\000\074\000\074\000\074\000\074\000\
    \074\000\074\000\074\000\074\000\074\000\074\000\074\000\074\000\
    \074\000\074\000\074\000\074\000\074\000\074\000\074\000\074\000\
    \074\000\074\000\074\000\074\000\074\000\074\000\074\000\074\000\
    \074\000\074\000\074\000\074\000\000\000\074\000\073\000\074\000\
    \077\000\000\000\077\000\077\000\000\000\077\000\077\000\000\000\
    \000\000\077\000\077\000\077\000\077\000\077\000\077\000\077\000\
    \077\000\077\000\077\000\077\000\077\000\077\000\077\000\077\000\
    \077\000\076\000\000\000\077\000\077\000\077\000\077\000\077\000\
    \077\000\077\000\077\000\077\000\077\000\077\000\077\000\077\000\
    \077\000\077\000\077\000\077\000\077\000\077\000\077\000\077\000\
    \077\000\077\000\077\000\077\000\077\000\077\000\077\000\077\000\
    \077\000\077\000\077\000\077\000\077\000\077\000\077\000\077\000\
    \077\000\077\000\077\000\077\000\077\000\077\000\077\000\077\000\
    \077\000\077\000\077\000\077\000\077\000\077\000\077\000\077\000\
    \077\000\077\000\077\000\077\000\077\000\077\000\077\000\077\000\
    \077\000\077\000\000\000\077\000\075\000\077\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\076\000\
    \000\000\076\000\076\000\000\000\076\000\076\000\000\000\000\000\
    \076\000\076\000\076\000\076\000\076\000\076\000\076\000\076\000\
    \076\000\076\000\076\000\076\000\076\000\076\000\076\000\076\000\
    \076\000\073\000\076\000\076\000\076\000\076\000\076\000\076\000\
    \076\000\076\000\076\000\076\000\076\000\076\000\076\000\076\000\
    \076\000\076\000\076\000\076\000\076\000\076\000\076\000\076\000\
    \076\000\076\000\076\000\076\000\076\000\076\000\076\000\076\000\
    \076\000\076\000\076\000\076\000\076\000\076\000\076\000\076\000\
    \076\000\076\000\076\000\076\000\076\000\076\000\076\000\076\000\
    \076\000\076\000\076\000\076\000\076\000\076\000\076\000\076\000\
    \076\000\076\000\076\000\076\000\076\000\076\000\076\000\076\000\
    \076\000\000\000\076\000\078\000\076\000\077\000\000\000\077\000\
    \077\000\000\000\077\000\077\000\000\000\000\000\077\000\077\000\
    \077\000\077\000\077\000\077\000\077\000\077\000\077\000\077\000\
    \077\000\077\000\077\000\077\000\077\000\077\000\076\000\000\000\
    \077\000\077\000\077\000\077\000\077\000\077\000\077\000\077\000\
    \077\000\077\000\077\000\077\000\077\000\077\000\077\000\077\000\
    \077\000\077\000\077\000\077\000\077\000\077\000\077\000\077\000\
    \077\000\077\000\077\000\077\000\077\000\077\000\077\000\077\000\
    \077\000\077\000\077\000\077\000\077\000\077\000\077\000\077\000\
    \077\000\077\000\077\000\077\000\077\000\077\000\077\000\077\000\
    \077\000\077\000\077\000\077\000\077\000\077\000\077\000\077\000\
    \077\000\077\000\077\000\077\000\077\000\077\000\077\000\000\000\
    \077\000\075\000\077\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000";
  Lexing.lex_check =
   "\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\000\000\000\000\005\000\000\000\000\000\005\000\006\000\
    \008\000\009\000\006\000\010\000\009\000\011\000\010\000\012\000\
    \021\000\026\000\012\000\021\000\033\000\045\000\035\000\050\000\
    \000\000\035\000\000\000\063\000\041\000\070\000\006\000\041\000\
    \000\000\000\000\010\000\255\255\255\255\255\255\021\000\255\255\
    \255\255\255\255\255\255\255\255\255\255\035\000\255\255\035\000\
    \255\255\255\255\255\255\000\000\070\000\013\000\255\255\013\000\
    \013\000\013\000\013\000\013\000\255\255\010\000\013\000\013\000\
    \013\000\013\000\013\000\013\000\013\000\013\000\013\000\013\000\
    \013\000\013\000\013\000\013\000\013\000\013\000\013\000\255\255\
    \013\000\013\000\013\000\013\000\013\000\013\000\013\000\013\000\
    \013\000\013\000\013\000\013\000\013\000\013\000\013\000\013\000\
    \013\000\013\000\013\000\013\000\013\000\013\000\013\000\013\000\
    \013\000\013\000\013\000\013\000\013\000\013\000\013\000\013\000\
    \013\000\013\000\013\000\013\000\013\000\013\000\013\000\013\000\
    \013\000\013\000\013\000\013\000\013\000\013\000\013\000\013\000\
    \013\000\013\000\013\000\013\000\013\000\013\000\013\000\013\000\
    \013\000\013\000\013\000\013\000\013\000\013\000\013\000\013\000\
    \013\000\013\000\013\000\014\000\015\000\017\000\015\000\015\000\
    \030\000\015\000\015\000\036\000\051\000\015\000\015\000\015\000\
    \015\000\015\000\015\000\015\000\015\000\015\000\015\000\015\000\
    \015\000\015\000\015\000\015\000\015\000\015\000\255\255\015\000\
    \015\000\015\000\015\000\015\000\015\000\015\000\015\000\015\000\
    \015\000\015\000\015\000\015\000\015\000\015\000\015\000\015\000\
    \015\000\015\000\015\000\015\000\015\000\015\000\015\000\015\000\
    \015\000\015\000\015\000\015\000\015\000\015\000\015\000\015\000\
    \015\000\015\000\015\000\015\000\015\000\015\000\015\000\015\000\
    \015\000\015\000\015\000\015\000\015\000\015\000\015\000\015\000\
    \015\000\015\000\015\000\015\000\015\000\015\000\015\000\015\000\
    \015\000\015\000\015\000\015\000\015\000\015\000\015\000\015\000\
    \015\000\015\000\018\000\027\000\037\000\038\000\027\000\037\000\
    \000\000\005\000\255\255\046\000\055\000\255\255\046\000\055\000\
    \255\255\255\255\255\255\255\255\255\255\012\000\021\000\255\255\
    \255\255\255\255\255\255\037\000\255\255\037\000\027\000\255\255\
    \255\255\255\255\041\000\046\000\055\000\255\255\046\000\055\000\
    \255\255\055\000\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\055\000\055\000\055\000\055\000\055\000\055\000\
    \055\000\055\000\055\000\055\000\255\255\255\255\255\255\255\255\
    \018\000\255\255\255\255\038\000\059\000\059\000\059\000\059\000\
    \059\000\059\000\059\000\059\000\059\000\059\000\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\027\000\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\046\000\055\000\255\255\
    \255\255\255\255\255\255\255\255\055\000\064\000\064\000\064\000\
    \064\000\064\000\064\000\064\000\064\000\064\000\064\000\255\255\
    \055\000\255\255\255\255\255\255\055\000\255\255\055\000\255\255\
    \255\255\255\255\055\000\058\000\058\000\058\000\058\000\058\000\
    \058\000\058\000\058\000\058\000\058\000\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\058\000\058\000\058\000\058\000\
    \058\000\058\000\065\000\065\000\065\000\065\000\065\000\065\000\
    \065\000\065\000\065\000\065\000\066\000\066\000\066\000\066\000\
    \066\000\066\000\066\000\066\000\066\000\066\000\255\255\255\255\
    \255\255\255\255\255\255\255\255\058\000\058\000\058\000\058\000\
    \058\000\058\000\067\000\067\000\067\000\067\000\067\000\067\000\
    \067\000\067\000\067\000\067\000\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\067\000\067\000\067\000\067\000\067\000\
    \067\000\068\000\068\000\068\000\068\000\068\000\068\000\068\000\
    \068\000\068\000\068\000\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\068\000\068\000\068\000\068\000\068\000\068\000\
    \255\255\255\255\255\255\067\000\067\000\067\000\067\000\067\000\
    \067\000\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\027\000\068\000\068\000\068\000\068\000\068\000\068\000\
    \255\255\046\000\055\000\069\000\069\000\069\000\069\000\069\000\
    \069\000\069\000\069\000\069\000\069\000\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\069\000\069\000\069\000\069\000\
    \069\000\069\000\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\069\000\069\000\069\000\069\000\
    \069\000\069\000\071\000\255\255\071\000\071\000\255\255\071\000\
    \071\000\255\255\255\255\071\000\071\000\071\000\071\000\071\000\
    \071\000\071\000\071\000\071\000\071\000\071\000\071\000\071\000\
    \071\000\071\000\071\000\255\255\255\255\071\000\071\000\071\000\
    \071\000\071\000\071\000\071\000\071\000\071\000\071\000\071\000\
    \071\000\071\000\071\000\071\000\071\000\071\000\071\000\071\000\
    \071\000\071\000\071\000\071\000\071\000\071\000\071\000\071\000\
    \071\000\071\000\071\000\071\000\071\000\071\000\071\000\071\000\
    \071\000\071\000\071\000\071\000\071\000\071\000\071\000\071\000\
    \071\000\071\000\071\000\071\000\071\000\071\000\071\000\071\000\
    \071\000\071\000\071\000\071\000\071\000\071\000\071\000\071\000\
    \071\000\071\000\071\000\071\000\255\255\071\000\071\000\071\000\
    \074\000\255\255\074\000\074\000\255\255\074\000\074\000\255\255\
    \255\255\074\000\074\000\074\000\074\000\074\000\074\000\074\000\
    \074\000\074\000\074\000\074\000\074\000\074\000\074\000\074\000\
    \074\000\074\000\255\255\074\000\074\000\074\000\074\000\074\000\
    \074\000\074\000\074\000\074\000\074\000\074\000\074\000\074\000\
    \074\000\074\000\074\000\074\000\074\000\074\000\074\000\074\000\
    \074\000\074\000\074\000\074\000\074\000\074\000\074\000\074\000\
    \074\000\074\000\074\000\074\000\074\000\074\000\074\000\074\000\
    \074\000\074\000\074\000\074\000\074\000\074\000\074\000\074\000\
    \074\000\074\000\074\000\074\000\074\000\074\000\074\000\074\000\
    \074\000\074\000\074\000\074\000\074\000\074\000\074\000\074\000\
    \074\000\074\000\255\255\074\000\074\000\074\000\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\076\000\
    \255\255\076\000\076\000\255\255\076\000\076\000\255\255\255\255\
    \076\000\076\000\076\000\076\000\076\000\076\000\076\000\076\000\
    \076\000\076\000\076\000\076\000\076\000\076\000\076\000\076\000\
    \076\000\071\000\076\000\076\000\076\000\076\000\076\000\076\000\
    \076\000\076\000\076\000\076\000\076\000\076\000\076\000\076\000\
    \076\000\076\000\076\000\076\000\076\000\076\000\076\000\076\000\
    \076\000\076\000\076\000\076\000\076\000\076\000\076\000\076\000\
    \076\000\076\000\076\000\076\000\076\000\076\000\076\000\076\000\
    \076\000\076\000\076\000\076\000\076\000\076\000\076\000\076\000\
    \076\000\076\000\076\000\076\000\076\000\076\000\076\000\076\000\
    \076\000\076\000\076\000\076\000\076\000\076\000\076\000\076\000\
    \076\000\255\255\076\000\076\000\076\000\077\000\255\255\077\000\
    \077\000\255\255\077\000\077\000\255\255\255\255\077\000\077\000\
    \077\000\077\000\077\000\077\000\077\000\077\000\077\000\077\000\
    \077\000\077\000\077\000\077\000\077\000\077\000\077\000\255\255\
    \077\000\077\000\077\000\077\000\077\000\077\000\077\000\077\000\
    \077\000\077\000\077\000\077\000\077\000\077\000\077\000\077\000\
    \077\000\077\000\077\000\077\000\077\000\077\000\077\000\077\000\
    \077\000\077\000\077\000\077\000\077\000\077\000\077\000\077\000\
    \077\000\077\000\077\000\077\000\077\000\077\000\077\000\077\000\
    \077\000\077\000\077\000\077\000\077\000\077\000\077\000\077\000\
    \077\000\077\000\077\000\077\000\077\000\077\000\077\000\077\000\
    \077\000\077\000\077\000\077\000\077\000\077\000\077\000\255\255\
    \077\000\077\000\077\000\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255";
  Lexing.lex_base_code =
   "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\092\000\015\000\184\000\020\001\028\000";
  Lexing.lex_backtrk_code =
   "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\004\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000";
  Lexing.lex_default_code =
   "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000";
  Lexing.lex_trans_code =
   "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\007\000\000\000\007\000\007\000\000\000\007\000\007\000\
    \000\000\000\000\007\000\007\000\007\000\007\000\007\000\007\000\
    \007\000\007\000\007\000\007\000\007\000\007\000\007\000\007\000\
    \007\000\007\000\000\000\001\000\007\000\007\000\007\000\007\000\
    \007\000\007\000\007\000\007\000\007\000\007\000\007\000\007\000\
    \007\000\007\000\007\000\007\000\007\000\007\000\007\000\007\000\
    \007\000\007\000\007\000\007\000\007\000\007\000\007\000\007\000\
    \007\000\007\000\007\000\007\000\007\000\007\000\007\000\007\000\
    \007\000\007\000\007\000\007\000\007\000\007\000\007\000\007\000\
    \007\000\007\000\007\000\007\000\007\000\007\000\007\000\007\000\
    \007\000\007\000\007\000\007\000\007\000\007\000\007\000\007\000\
    \007\000\007\000\007\000\000\000\007\000\007\000\007\000\007\000\
    \007\000\000\000\007\000\007\000\000\000\000\000\007\000\007\000\
    \007\000\007\000\007\000\007\000\007\000\007\000\007\000\007\000\
    \007\000\007\000\007\000\007\000\007\000\007\000\010\000\000\000\
    \007\000\007\000\007\000\007\000\007\000\007\000\007\000\007\000\
    \007\000\007\000\007\000\007\000\007\000\007\000\007\000\007\000\
    \007\000\007\000\007\000\007\000\007\000\007\000\007\000\007\000\
    \007\000\007\000\007\000\007\000\007\000\007\000\007\000\007\000\
    \007\000\007\000\007\000\007\000\007\000\007\000\007\000\007\000\
    \007\000\007\000\007\000\007\000\007\000\007\000\007\000\007\000\
    \007\000\007\000\007\000\007\000\007\000\007\000\007\000\007\000\
    \007\000\007\000\007\000\007\000\007\000\007\000\007\000\000\000\
    \007\000\020\000\007\000\020\000\020\000\000\000\020\000\020\000\
    \000\000\000\000\020\000\020\000\020\000\020\000\020\000\020\000\
    \020\000\020\000\020\000\020\000\020\000\020\000\020\000\020\000\
    \020\000\020\000\020\000\000\000\020\000\020\000\020\000\020\000\
    \020\000\020\000\020\000\020\000\020\000\020\000\020\000\020\000\
    \020\000\020\000\020\000\020\000\020\000\020\000\020\000\020\000\
    \020\000\020\000\020\000\020\000\020\000\020\000\020\000\020\000\
    \020\000\020\000\020\000\020\000\020\000\020\000\020\000\020\000\
    \020\000\020\000\020\000\020\000\020\000\020\000\020\000\020\000\
    \020\000\020\000\020\000\020\000\020\000\020\000\020\000\020\000\
    \020\000\020\000\020\000\020\000\020\000\020\000\020\000\020\000\
    \020\000\020\000\020\000\000\000\020\000\007\000\020\000\007\000\
    \007\000\000\000\007\000\007\000\000\000\000\000\007\000\007\000\
    \007\000\007\000\007\000\007\000\007\000\007\000\007\000\007\000\
    \007\000\007\000\007\000\007\000\007\000\007\000\023\000\000\000\
    \007\000\007\000\007\000\007\000\007\000\007\000\007\000\007\000\
    \007\000\007\000\007\000\007\000\007\000\007\000\007\000\007\000\
    \007\000\007\000\007\000\007\000\007\000\007\000\007\000\007\000\
    \007\000\007\000\007\000\007\000\007\000\007\000\007\000\007\000\
    \007\000\007\000\007\000\007\000\007\000\007\000\007\000\007\000\
    \007\000\007\000\007\000\007\000\007\000\007\000\007\000\007\000\
    \007\000\007\000\007\000\007\000\007\000\007\000\007\000\007\000\
    \007\000\007\000\007\000\007\000\007\000\007\000\007\000\000\000\
    \007\000\000\000\007\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000";
  Lexing.lex_check_code =
   "\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\071\000\255\255\071\000\071\000\255\255\071\000\071\000\
    \255\255\255\255\071\000\071\000\071\000\071\000\071\000\071\000\
    \071\000\071\000\071\000\071\000\071\000\071\000\071\000\071\000\
    \071\000\071\000\255\255\010\000\071\000\071\000\071\000\071\000\
    \071\000\071\000\071\000\071\000\071\000\071\000\071\000\071\000\
    \071\000\071\000\071\000\071\000\071\000\071\000\071\000\071\000\
    \071\000\071\000\071\000\071\000\071\000\071\000\071\000\071\000\
    \071\000\071\000\071\000\071\000\071\000\071\000\071\000\071\000\
    \071\000\071\000\071\000\071\000\071\000\071\000\071\000\071\000\
    \071\000\071\000\071\000\071\000\071\000\071\000\071\000\071\000\
    \071\000\071\000\071\000\071\000\071\000\071\000\071\000\071\000\
    \071\000\071\000\071\000\255\255\071\000\074\000\071\000\074\000\
    \074\000\255\255\074\000\074\000\255\255\255\255\074\000\074\000\
    \074\000\074\000\074\000\074\000\074\000\074\000\074\000\074\000\
    \074\000\074\000\074\000\074\000\074\000\074\000\074\000\255\255\
    \074\000\074\000\074\000\074\000\074\000\074\000\074\000\074\000\
    \074\000\074\000\074\000\074\000\074\000\074\000\074\000\074\000\
    \074\000\074\000\074\000\074\000\074\000\074\000\074\000\074\000\
    \074\000\074\000\074\000\074\000\074\000\074\000\074\000\074\000\
    \074\000\074\000\074\000\074\000\074\000\074\000\074\000\074\000\
    \074\000\074\000\074\000\074\000\074\000\074\000\074\000\074\000\
    \074\000\074\000\074\000\074\000\074\000\074\000\074\000\074\000\
    \074\000\074\000\074\000\074\000\074\000\074\000\074\000\255\255\
    \074\000\076\000\074\000\076\000\076\000\255\255\076\000\076\000\
    \255\255\255\255\076\000\076\000\076\000\076\000\076\000\076\000\
    \076\000\076\000\076\000\076\000\076\000\076\000\076\000\076\000\
    \076\000\076\000\076\000\255\255\076\000\076\000\076\000\076\000\
    \076\000\076\000\076\000\076\000\076\000\076\000\076\000\076\000\
    \076\000\076\000\076\000\076\000\076\000\076\000\076\000\076\000\
    \076\000\076\000\076\000\076\000\076\000\076\000\076\000\076\000\
    \076\000\076\000\076\000\076\000\076\000\076\000\076\000\076\000\
    \076\000\076\000\076\000\076\000\076\000\076\000\076\000\076\000\
    \076\000\076\000\076\000\076\000\076\000\076\000\076\000\076\000\
    \076\000\076\000\076\000\076\000\076\000\076\000\076\000\076\000\
    \076\000\076\000\076\000\255\255\076\000\077\000\076\000\077\000\
    \077\000\255\255\077\000\077\000\255\255\255\255\077\000\077\000\
    \077\000\077\000\077\000\077\000\077\000\077\000\077\000\077\000\
    \077\000\077\000\077\000\077\000\077\000\077\000\077\000\255\255\
    \077\000\077\000\077\000\077\000\077\000\077\000\077\000\077\000\
    \077\000\077\000\077\000\077\000\077\000\077\000\077\000\077\000\
    \077\000\077\000\077\000\077\000\077\000\077\000\077\000\077\000\
    \077\000\077\000\077\000\077\000\077\000\077\000\077\000\077\000\
    \077\000\077\000\077\000\077\000\077\000\077\000\077\000\077\000\
    \077\000\077\000\077\000\077\000\077\000\077\000\077\000\077\000\
    \077\000\077\000\077\000\077\000\077\000\077\000\077\000\077\000\
    \077\000\077\000\077\000\077\000\077\000\077\000\077\000\255\255\
    \077\000\255\255\077\000\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255";
  Lexing.lex_code =
   "\255\001\255\255\000\001\255\003\255\255\005\255\004\255\255\002\
    \255\000\003\255\005\255\255\004\255\005\255\255\002\004\001\005\
    \000\003\255";
}

let rec token with_comments lexbuf =
   __ocaml_lex_token_rec with_comments lexbuf 0
and __ocaml_lex_token_rec with_comments lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 167 "book/duniverse/dune-configurator.2.0.1/src/dune_lang/lexer.mll"
    ( Lexing.new_line lexbuf; token with_comments lexbuf )
# 645 "book/duniverse/dune-configurator.2.0.1/src/dune_lang/lexer.ml"

  | 1 ->
# 169 "book/duniverse/dune-configurator.2.0.1/src/dune_lang/lexer.mll"
    ( token with_comments lexbuf )
# 650 "book/duniverse/dune-configurator.2.0.1/src/dune_lang/lexer.ml"

  | 2 ->
# 171 "book/duniverse/dune-configurator.2.0.1/src/dune_lang/lexer.mll"
    ( if with_comments then
        comment_trail [String.drop (Lexing.lexeme lexbuf) 1] lexbuf
      else
        token with_comments lexbuf
    )
# 659 "book/duniverse/dune-configurator.2.0.1/src/dune_lang/lexer.ml"

  | 3 ->
# 177 "book/duniverse/dune-configurator.2.0.1/src/dune_lang/lexer.mll"
    ( Token.Lparen )
# 664 "book/duniverse/dune-configurator.2.0.1/src/dune_lang/lexer.ml"

  | 4 ->
# 179 "book/duniverse/dune-configurator.2.0.1/src/dune_lang/lexer.mll"
    ( Rparen )
# 669 "book/duniverse/dune-configurator.2.0.1/src/dune_lang/lexer.ml"

  | 5 ->
# 181 "book/duniverse/dune-configurator.2.0.1/src/dune_lang/lexer.mll"
    ( let start = Lexing.lexeme_start_p lexbuf in
      Template.Buffer.new_token ();
      let token = start_quoted_string lexbuf in
      lexbuf.lex_start_p <- start;
      token
    )
# 679 "book/duniverse/dune-configurator.2.0.1/src/dune_lang/lexer.ml"

  | 6 ->
# 188 "book/duniverse/dune-configurator.2.0.1/src/dune_lang/lexer.mll"
    ( Eof )
# 684 "book/duniverse/dune-configurator.2.0.1/src/dune_lang/lexer.ml"

  | 7 ->
# 190 "book/duniverse/dune-configurator.2.0.1/src/dune_lang/lexer.mll"
    ( atom [] (Lexing.lexeme_start_p lexbuf) lexbuf )
# 689 "book/duniverse/dune-configurator.2.0.1/src/dune_lang/lexer.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf;
      __ocaml_lex_token_rec with_comments lexbuf __ocaml_lex_state

and comment_trail acc lexbuf =
  lexbuf.Lexing.lex_mem <- Array.make 2 (-1); __ocaml_lex_comment_trail_rec acc lexbuf 9
and __ocaml_lex_comment_trail_rec acc lexbuf __ocaml_lex_state =
  match Lexing.new_engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
let
# 193 "book/duniverse/dune-configurator.2.0.1/src/dune_lang/lexer.mll"
                                        s
# 702 "book/duniverse/dune-configurator.2.0.1/src/dune_lang/lexer.ml"
= Lexing.sub_lexeme lexbuf lexbuf.Lexing.lex_mem.(0) lexbuf.Lexing.lex_curr_pos in
# 194 "book/duniverse/dune-configurator.2.0.1/src/dune_lang/lexer.mll"
    ( comment_trail (s :: acc) lexbuf )
# 706 "book/duniverse/dune-configurator.2.0.1/src/dune_lang/lexer.ml"

  | 1 ->
# 196 "book/duniverse/dune-configurator.2.0.1/src/dune_lang/lexer.mll"
    ( Token.Comment (Lines (List.rev acc)) )
# 711 "book/duniverse/dune-configurator.2.0.1/src/dune_lang/lexer.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf;
      __ocaml_lex_comment_trail_rec acc lexbuf __ocaml_lex_state

and atom acc start lexbuf =
   __ocaml_lex_atom_rec acc start lexbuf 13
and __ocaml_lex_atom_rec acc start lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
let
# 199 "book/duniverse/dune-configurator.2.0.1/src/dune_lang/lexer.mll"
                          s
# 724 "book/duniverse/dune-configurator.2.0.1/src/dune_lang/lexer.ml"
= Lexing.sub_lexeme lexbuf lexbuf.Lexing.lex_start_pos lexbuf.Lexing.lex_curr_pos in
# 200 "book/duniverse/dune-configurator.2.0.1/src/dune_lang/lexer.mll"
    ( atom (Template.add_text acc s) start lexbuf )
# 728 "book/duniverse/dune-configurator.2.0.1/src/dune_lang/lexer.ml"

  | 1 ->
# 202 "book/duniverse/dune-configurator.2.0.1/src/dune_lang/lexer.mll"
    ( atom ((template_variable lexbuf) :: acc) start lexbuf )
# 733 "book/duniverse/dune-configurator.2.0.1/src/dune_lang/lexer.ml"

  | 2 ->
# 204 "book/duniverse/dune-configurator.2.0.1/src/dune_lang/lexer.mll"
    ( atom (Template.add_text acc "%") start lexbuf )
# 738 "book/duniverse/dune-configurator.2.0.1/src/dune_lang/lexer.ml"

  | 3 ->
# 206 "book/duniverse/dune-configurator.2.0.1/src/dune_lang/lexer.mll"
    ( Template.token acc ~quoted:false ~start lexbuf )
# 743 "book/duniverse/dune-configurator.2.0.1/src/dune_lang/lexer.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf;
      __ocaml_lex_atom_rec acc start lexbuf __ocaml_lex_state

and start_quoted_string lexbuf =
   __ocaml_lex_start_quoted_string_rec lexbuf 17
and __ocaml_lex_start_quoted_string_rec lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 210 "book/duniverse/dune-configurator.2.0.1/src/dune_lang/lexer.mll"
    ( block_string_start With_escape_sequences lexbuf )
# 755 "book/duniverse/dune-configurator.2.0.1/src/dune_lang/lexer.ml"

  | 1 ->
# 212 "book/duniverse/dune-configurator.2.0.1/src/dune_lang/lexer.mll"
    ( block_string_start Raw lexbuf )
# 760 "book/duniverse/dune-configurator.2.0.1/src/dune_lang/lexer.ml"

  | 2 ->
# 214 "book/duniverse/dune-configurator.2.0.1/src/dune_lang/lexer.mll"
    ( quoted_string lexbuf )
# 765 "book/duniverse/dune-configurator.2.0.1/src/dune_lang/lexer.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf;
      __ocaml_lex_start_quoted_string_rec lexbuf __ocaml_lex_state

and block_string_start kind lexbuf =
   __ocaml_lex_block_string_start_rec kind lexbuf 21
and __ocaml_lex_block_string_start_rec kind lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
let
# 217 "book/duniverse/dune-configurator.2.0.1/src/dune_lang/lexer.mll"
               s
# 778 "book/duniverse/dune-configurator.2.0.1/src/dune_lang/lexer.ml"
= Lexing.sub_lexeme lexbuf lexbuf.Lexing.lex_start_pos lexbuf.Lexing.lex_curr_pos in
# 218 "book/duniverse/dune-configurator.2.0.1/src/dune_lang/lexer.mll"
    ( Lexing.new_line lexbuf;
      Template.Buffer.add_text s;
      block_string_after_newline lexbuf
    )
# 785 "book/duniverse/dune-configurator.2.0.1/src/dune_lang/lexer.ml"

  | 1 ->
# 223 "book/duniverse/dune-configurator.2.0.1/src/dune_lang/lexer.mll"
    ( match kind with
      | With_escape_sequences -> block_string lexbuf
      | Raw -> raw_block_string lexbuf
    )
# 793 "book/duniverse/dune-configurator.2.0.1/src/dune_lang/lexer.ml"

  | 2 ->
# 228 "book/duniverse/dune-configurator.2.0.1/src/dune_lang/lexer.mll"
    ( Template.Buffer.get () )
# 798 "book/duniverse/dune-configurator.2.0.1/src/dune_lang/lexer.ml"

  | 3 ->
# 230 "book/duniverse/dune-configurator.2.0.1/src/dune_lang/lexer.mll"
    ( error lexbuf "There must be at least one space after \"\\|"
    )
# 804 "book/duniverse/dune-configurator.2.0.1/src/dune_lang/lexer.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf;
      __ocaml_lex_block_string_start_rec kind lexbuf __ocaml_lex_state

and block_string lexbuf =
   __ocaml_lex_block_string_rec lexbuf 27
and __ocaml_lex_block_string_rec lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
let
# 234 "book/duniverse/dune-configurator.2.0.1/src/dune_lang/lexer.mll"
               s
# 817 "book/duniverse/dune-configurator.2.0.1/src/dune_lang/lexer.ml"
= Lexing.sub_lexeme lexbuf lexbuf.Lexing.lex_start_pos lexbuf.Lexing.lex_curr_pos in
# 235 "book/duniverse/dune-configurator.2.0.1/src/dune_lang/lexer.mll"
    ( Lexing.new_line lexbuf;
      Template.Buffer.add_text s;
      block_string_after_newline lexbuf
    )
# 824 "book/duniverse/dune-configurator.2.0.1/src/dune_lang/lexer.ml"

  | 1 ->
# 240 "book/duniverse/dune-configurator.2.0.1/src/dune_lang/lexer.mll"
    ( match escape_sequence lexbuf with
      | Newline -> block_string_after_newline lexbuf
      | Other   -> block_string               lexbuf
    )
# 832 "book/duniverse/dune-configurator.2.0.1/src/dune_lang/lexer.ml"

  | 2 ->
# 244 "book/duniverse/dune-configurator.2.0.1/src/dune_lang/lexer.mll"
         (
      let var = template_variable lexbuf in
      Template.Buffer.add_var var;
      block_string lexbuf
    )
# 841 "book/duniverse/dune-configurator.2.0.1/src/dune_lang/lexer.ml"

  | 3 ->
let
# 249 "book/duniverse/dune-configurator.2.0.1/src/dune_lang/lexer.mll"
         c
# 847 "book/duniverse/dune-configurator.2.0.1/src/dune_lang/lexer.ml"
= Lexing.sub_lexeme_char lexbuf lexbuf.Lexing.lex_start_pos in
# 250 "book/duniverse/dune-configurator.2.0.1/src/dune_lang/lexer.mll"
    ( Template.Buffer.add_text_c c;
      block_string lexbuf
    )
# 853 "book/duniverse/dune-configurator.2.0.1/src/dune_lang/lexer.ml"

  | 4 ->
# 254 "book/duniverse/dune-configurator.2.0.1/src/dune_lang/lexer.mll"
    ( Template.Buffer.get ()
    )
# 859 "book/duniverse/dune-configurator.2.0.1/src/dune_lang/lexer.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf;
      __ocaml_lex_block_string_rec lexbuf __ocaml_lex_state

and block_string_after_newline lexbuf =
   __ocaml_lex_block_string_after_newline_rec lexbuf 35
and __ocaml_lex_block_string_after_newline_rec lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 259 "book/duniverse/dune-configurator.2.0.1/src/dune_lang/lexer.mll"
    ( block_string_start With_escape_sequences lexbuf )
# 871 "book/duniverse/dune-configurator.2.0.1/src/dune_lang/lexer.ml"

  | 1 ->
# 261 "book/duniverse/dune-configurator.2.0.1/src/dune_lang/lexer.mll"
    ( block_string_start Raw lexbuf )
# 876 "book/duniverse/dune-configurator.2.0.1/src/dune_lang/lexer.ml"

  | 2 ->
# 263 "book/duniverse/dune-configurator.2.0.1/src/dune_lang/lexer.mll"
    ( Template.Buffer.get ()
    )
# 882 "book/duniverse/dune-configurator.2.0.1/src/dune_lang/lexer.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf;
      __ocaml_lex_block_string_after_newline_rec lexbuf __ocaml_lex_state

and raw_block_string lexbuf =
   __ocaml_lex_raw_block_string_rec lexbuf 41
and __ocaml_lex_raw_block_string_rec lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
let
# 267 "book/duniverse/dune-configurator.2.0.1/src/dune_lang/lexer.mll"
               s
# 895 "book/duniverse/dune-configurator.2.0.1/src/dune_lang/lexer.ml"
= Lexing.sub_lexeme lexbuf lexbuf.Lexing.lex_start_pos lexbuf.Lexing.lex_curr_pos in
# 268 "book/duniverse/dune-configurator.2.0.1/src/dune_lang/lexer.mll"
    ( Lexing.new_line lexbuf;
      Template.Buffer.add_text s;
      block_string_after_newline lexbuf
    )
# 902 "book/duniverse/dune-configurator.2.0.1/src/dune_lang/lexer.ml"

  | 1 ->
let
# 272 "book/duniverse/dune-configurator.2.0.1/src/dune_lang/lexer.mll"
         c
# 908 "book/duniverse/dune-configurator.2.0.1/src/dune_lang/lexer.ml"
= Lexing.sub_lexeme_char lexbuf lexbuf.Lexing.lex_start_pos in
# 273 "book/duniverse/dune-configurator.2.0.1/src/dune_lang/lexer.mll"
    ( Template.Buffer.add_text_c c;
      raw_block_string lexbuf
    )
# 914 "book/duniverse/dune-configurator.2.0.1/src/dune_lang/lexer.ml"

  | 2 ->
# 277 "book/duniverse/dune-configurator.2.0.1/src/dune_lang/lexer.mll"
    ( Template.Buffer.get ()
    )
# 920 "book/duniverse/dune-configurator.2.0.1/src/dune_lang/lexer.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf;
      __ocaml_lex_raw_block_string_rec lexbuf __ocaml_lex_state

and quoted_string lexbuf =
   __ocaml_lex_quoted_string_rec lexbuf 46
and __ocaml_lex_quoted_string_rec lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 282 "book/duniverse/dune-configurator.2.0.1/src/dune_lang/lexer.mll"
    ( Template.Buffer.get () )
# 932 "book/duniverse/dune-configurator.2.0.1/src/dune_lang/lexer.ml"

  | 1 ->
# 284 "book/duniverse/dune-configurator.2.0.1/src/dune_lang/lexer.mll"
    ( match escape_sequence lexbuf with
      | Newline -> quoted_string_after_escaped_newline lexbuf
      | Other   -> quoted_string                       lexbuf
    )
# 940 "book/duniverse/dune-configurator.2.0.1/src/dune_lang/lexer.ml"

  | 2 ->
# 289 "book/duniverse/dune-configurator.2.0.1/src/dune_lang/lexer.mll"
    ( Template.Buffer.add_var (template_variable lexbuf);
      quoted_string lexbuf
    )
# 947 "book/duniverse/dune-configurator.2.0.1/src/dune_lang/lexer.ml"

  | 3 ->
let
# 292 "book/duniverse/dune-configurator.2.0.1/src/dune_lang/lexer.mll"
               s
# 953 "book/duniverse/dune-configurator.2.0.1/src/dune_lang/lexer.ml"
= Lexing.sub_lexeme lexbuf lexbuf.Lexing.lex_start_pos lexbuf.Lexing.lex_curr_pos in
# 293 "book/duniverse/dune-configurator.2.0.1/src/dune_lang/lexer.mll"
    ( Lexing.new_line lexbuf;
      Template.Buffer.add_text s;
      quoted_string lexbuf
    )
# 960 "book/duniverse/dune-configurator.2.0.1/src/dune_lang/lexer.ml"

  | 4 ->
let
# 297 "book/duniverse/dune-configurator.2.0.1/src/dune_lang/lexer.mll"
         c
# 966 "book/duniverse/dune-configurator.2.0.1/src/dune_lang/lexer.ml"
= Lexing.sub_lexeme_char lexbuf lexbuf.Lexing.lex_start_pos in
# 298 "book/duniverse/dune-configurator.2.0.1/src/dune_lang/lexer.mll"
    ( Template.Buffer.add_text_c c;
      quoted_string lexbuf
    )
# 972 "book/duniverse/dune-configurator.2.0.1/src/dune_lang/lexer.ml"

  | 5 ->
# 302 "book/duniverse/dune-configurator.2.0.1/src/dune_lang/lexer.mll"
    ( error lexbuf "unterminated quoted string"
    )
# 978 "book/duniverse/dune-configurator.2.0.1/src/dune_lang/lexer.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf;
      __ocaml_lex_quoted_string_rec lexbuf __ocaml_lex_state

and escape_sequence lexbuf =
   __ocaml_lex_escape_sequence_rec lexbuf 55
and __ocaml_lex_escape_sequence_rec lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 307 "book/duniverse/dune-configurator.2.0.1/src/dune_lang/lexer.mll"
    ( Lexing.new_line lexbuf;
      Newline )
# 991 "book/duniverse/dune-configurator.2.0.1/src/dune_lang/lexer.ml"

  | 1 ->
# 310 "book/duniverse/dune-configurator.2.0.1/src/dune_lang/lexer.mll"
    ( Template.Buffer.add_text_c '%';
      Other
    )
# 998 "book/duniverse/dune-configurator.2.0.1/src/dune_lang/lexer.ml"

  | 2 ->
let
# 313 "book/duniverse/dune-configurator.2.0.1/src/dune_lang/lexer.mll"
                                       c
# 1004 "book/duniverse/dune-configurator.2.0.1/src/dune_lang/lexer.ml"
= Lexing.sub_lexeme_char lexbuf lexbuf.Lexing.lex_start_pos in
# 314 "book/duniverse/dune-configurator.2.0.1/src/dune_lang/lexer.mll"
    ( let c =
        match c with
        | 'n' -> '\n'
        | 'r' -> '\r'
        | 'b' -> '\b'
        | 't' -> '\t'
        | _   -> c
      in
      Template.Buffer.add_text_c c;
      Other
    )
# 1018 "book/duniverse/dune-configurator.2.0.1/src/dune_lang/lexer.ml"

  | 3 ->
let
# 325 "book/duniverse/dune-configurator.2.0.1/src/dune_lang/lexer.mll"
              c1
# 1024 "book/duniverse/dune-configurator.2.0.1/src/dune_lang/lexer.ml"
= Lexing.sub_lexeme_char lexbuf lexbuf.Lexing.lex_start_pos
and
# 325 "book/duniverse/dune-configurator.2.0.1/src/dune_lang/lexer.mll"
                            c2
# 1029 "book/duniverse/dune-configurator.2.0.1/src/dune_lang/lexer.ml"
= Lexing.sub_lexeme_char lexbuf (lexbuf.Lexing.lex_start_pos + 1)
and
# 325 "book/duniverse/dune-configurator.2.0.1/src/dune_lang/lexer.mll"
                                          c3
# 1034 "book/duniverse/dune-configurator.2.0.1/src/dune_lang/lexer.ml"
= Lexing.sub_lexeme_char lexbuf (lexbuf.Lexing.lex_start_pos + 2) in
# 326 "book/duniverse/dune-configurator.2.0.1/src/dune_lang/lexer.mll"
    ( let v = eval_decimal_escape c1 c2 c3 in
      if v > 255 then
        error lexbuf "escape sequence in quoted string out of range"
          ~delta:(-1);
      Template.Buffer.add_text_c (Char.chr v);
      Other
    )
# 1044 "book/duniverse/dune-configurator.2.0.1/src/dune_lang/lexer.ml"

  | 4 ->
# 334 "book/duniverse/dune-configurator.2.0.1/src/dune_lang/lexer.mll"
    ( error lexbuf "escape sequence in quoted string out of range" ~delta:(-1);
    )
# 1050 "book/duniverse/dune-configurator.2.0.1/src/dune_lang/lexer.ml"

  | 5 ->
# 337 "book/duniverse/dune-configurator.2.0.1/src/dune_lang/lexer.mll"
    ( error lexbuf "unterminated decimal escape sequence" ~delta:(-1);
    )
# 1056 "book/duniverse/dune-configurator.2.0.1/src/dune_lang/lexer.ml"

  | 6 ->
let
# 339 "book/duniverse/dune-configurator.2.0.1/src/dune_lang/lexer.mll"
                     c1
# 1062 "book/duniverse/dune-configurator.2.0.1/src/dune_lang/lexer.ml"
= Lexing.sub_lexeme_char lexbuf (lexbuf.Lexing.lex_start_pos + 1)
and
# 339 "book/duniverse/dune-configurator.2.0.1/src/dune_lang/lexer.mll"
                                      c2
# 1067 "book/duniverse/dune-configurator.2.0.1/src/dune_lang/lexer.ml"
= Lexing.sub_lexeme_char lexbuf (lexbuf.Lexing.lex_start_pos + 2) in
# 340 "book/duniverse/dune-configurator.2.0.1/src/dune_lang/lexer.mll"
    ( let v = eval_hex_escape c1 c2 in
      Template.Buffer.add_text_c (Char.chr v);
      Other
    )
# 1074 "book/duniverse/dune-configurator.2.0.1/src/dune_lang/lexer.ml"

  | 7 ->
# 345 "book/duniverse/dune-configurator.2.0.1/src/dune_lang/lexer.mll"
    ( error lexbuf "unterminated hexadecimal escape sequence" ~delta:(-1);
    )
# 1080 "book/duniverse/dune-configurator.2.0.1/src/dune_lang/lexer.ml"

  | 8 ->
# 348 "book/duniverse/dune-configurator.2.0.1/src/dune_lang/lexer.mll"
    ( error lexbuf "unknown escape sequence" ~delta:(-1);
    )
# 1086 "book/duniverse/dune-configurator.2.0.1/src/dune_lang/lexer.ml"

  | 9 ->
# 351 "book/duniverse/dune-configurator.2.0.1/src/dune_lang/lexer.mll"
    ( error lexbuf "unterminated escape sequence" ~delta:(-1);
    )
# 1092 "book/duniverse/dune-configurator.2.0.1/src/dune_lang/lexer.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf;
      __ocaml_lex_escape_sequence_rec lexbuf __ocaml_lex_state

and quoted_string_after_escaped_newline lexbuf =
   __ocaml_lex_quoted_string_after_escaped_newline_rec lexbuf 70
and __ocaml_lex_quoted_string_after_escaped_newline_rec lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 356 "book/duniverse/dune-configurator.2.0.1/src/dune_lang/lexer.mll"
    ( quoted_string lexbuf )
# 1104 "book/duniverse/dune-configurator.2.0.1/src/dune_lang/lexer.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf;
      __ocaml_lex_quoted_string_after_escaped_newline_rec lexbuf __ocaml_lex_state

and template_variable lexbuf =
  lexbuf.Lexing.lex_mem <- Array.make 6 (-1); __ocaml_lex_template_variable_rec lexbuf 71
and __ocaml_lex_template_variable_rec lexbuf __ocaml_lex_state =
  match Lexing.new_engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
let
# 359 "book/duniverse/dune-configurator.2.0.1/src/dune_lang/lexer.mll"
                      name
# 1117 "book/duniverse/dune-configurator.2.0.1/src/dune_lang/lexer.ml"
= Lexing.sub_lexeme lexbuf lexbuf.Lexing.lex_start_pos lexbuf.Lexing.lex_mem.(0)
and
# 359 "book/duniverse/dune-configurator.2.0.1/src/dune_lang/lexer.mll"
                                                           payload
# 1122 "book/duniverse/dune-configurator.2.0.1/src/dune_lang/lexer.ml"
= Lexing.sub_lexeme_opt lexbuf lexbuf.Lexing.lex_mem.(2) lexbuf.Lexing.lex_mem.(1) in
# 360 "book/duniverse/dune-configurator.2.0.1/src/dune_lang/lexer.mll"
    ( let payload =
        match payload with
        | Some "" -> error lexbuf "payload after : in variable cannot be empty"
        | p -> p
      in
      Template.Var
        { loc =
            { start = Lexing.lexeme_start_p lexbuf
            ; stop = Lexing.lexeme_end_p lexbuf
            }
        ; name
        ; payload
        ; syntax = Percent
        }
  )
# 1140 "book/duniverse/dune-configurator.2.0.1/src/dune_lang/lexer.ml"

  | 1 ->
# 376 "book/duniverse/dune-configurator.2.0.1/src/dune_lang/lexer.mll"
    ( error lexbuf "%{...} forms cannot be empty" )
# 1145 "book/duniverse/dune-configurator.2.0.1/src/dune_lang/lexer.ml"

  | 2 ->
# 377 "book/duniverse/dune-configurator.2.0.1/src/dune_lang/lexer.mll"
      ( error lexbuf "This character is not allowed inside %{...} forms" )
# 1150 "book/duniverse/dune-configurator.2.0.1/src/dune_lang/lexer.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf;
      __ocaml_lex_template_variable_rec lexbuf __ocaml_lex_state

;;

# 379 "book/duniverse/dune-configurator.2.0.1/src/dune_lang/lexer.mll"
 
  let token ~with_comments lexbuf = token with_comments lexbuf

# 1161 "book/duniverse/dune-configurator.2.0.1/src/dune_lang/lexer.ml"
